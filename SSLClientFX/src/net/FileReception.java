/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net;

import java.io.*;

/**
 * @author lbsilva
 */
public class FileReception extends FileTransmission {

    /**
     * The Id generated by the server
     */
    private String id;

    /**
     * Receives a file
     * @param path - Path where the file will be saved to
     * @throws IOException - Some network failure
     */
    public FileReception(String path) throws IOException {
        super(path);
//        if (file.exists()) { // In case you don't want to allow the user to replace existent files
//            throw new FileAlreadyExistsException("File \""+path+"\" already exists.");
//        }
        handshake();
    }

    /**
     * Handshake process with the server
     * @throws IOException - Some network failure
     */
    private void handshake() throws IOException {
        new Transmission(sslSocket).sendText("RECEPTOR");
        this.id = new Transmission(sslSocket).readText();
    }

    /**
     * Tries to safely close the connection, not crashing the app
     * if it doesn't succeed in closing the connection safely
     */
    public void closeConnection() {
        canceled = true;
        try {
            new Transmission(sslSocket).sendText("CANCEL");
        } catch (IOException ignored) {
        }
        try {
            sslSocket.close();
        } catch (IOException ignored) {
        }
    }

    /**
     * Getter for the Id
     * @return - the id
     */
    public String getId() {
        return id;
    }

    @Override
    public void start() {
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        InputStream in = null;
        try {
            sslSocket.setSoTimeout(0); // Waiting infinitely unless the user cancels
            in = sslSocket.getInputStream();
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos);

            byte[] buffer = new byte[BUFFER_SIZE];
            int length;
            while (!canceled && ((length = in.read(buffer)) > 0)) {
                bos.write(buffer, 0, length);
            }
            bos.flush(); // It's a bit redundant but just in case
            status = canceled? "Canceled" : "Downloaded\n\"" + file.getAbsolutePath()
                    + "\"\n(" + file.length() + " bytes)";
        } catch (IOException exception) {
            status = "Either canceled or some error occurred.";
            canceled = true;
        } finally {
            finish(fos, bos, in, sslSocket);
        }
    }

    /**
     * Finishes a transformation process by closing all the streams and
     * deleting the file if it was aborted
     *
     * @param closeables the streams
     */
    @Override
    protected void finish(Closeable... closeables) {
        super.finish(closeables);
        if (canceled) file.delete(); // If it was aborted the file might be corrupted
    }
}
